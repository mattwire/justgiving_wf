<?php
/**
 * @file
 * JustGiving Integration module
 *
 * @global: $_justgiving_helper
 */

// We have to load the libraries module if it doesn't exist.
if (!function_exists('libraries_load')) {
  module_load_include('module', 'libraries');
}




function justgiving_wf_get_jg_helper() {
  $jg_lib_path = function_exists('libraries_get_path') ? libraries_get_path('justgiving') : 'sites/all/libraries/justgiving';
  $jg_platform = $jg_lib_path . '/JustGivingClient.php';

  require_once($jg_platform);
  require_once(drupal_get_path('module', 'justgiving_wf') . '/services/justgiving.php');

  // Create our helper global.
  global $_justgiving_helper;
  if (empty($_justgiving_helper)) {
    $_justgiving_helper = new JustGiving();
  }
}

/**
 * Implements hook_libraries_info().
 *
 * For defining external JG SDK.
 */
function justgiving_wf_libraries_info() {
  $libraries['justgiving'] = array(
    'name' => 'The Just Giving PHP SDK',
    'vendor url' => 'http://example.com/simple',
    'download url' => 'http://example.com/simple',
    'version' => '1.0',
    'version arguments' => array(
      'file' => 'JustGivingClient.php',
      'pattern' => '/Version (\d+)/',
      'lines' => 5,
    ),
    'files' => array('php' => array(
        'JustGivingClient.php',
        'ApiClients/Model/CreateAccountRequest.php',
        'ApiClients/Model/RegisterPageRequest.php',
      ), ),
  );
  return $libraries;
}

function justgiving_wf_registry_files_alter(&$files, $modules) {
  if (!class_exists('JustGivingClient')) {
    $library_path = function_exists('libraries_get_path') ? libraries_get_path('justgiving') : 'sites/all/libraries/justgiving';
    $files[$library_path . '/JustGivingClient.php'] = array(
      'module' => 'justgiving',
      'weight' => 0,
    );
    $files[$library_path . '/ApiClients/Model/CreateAccountRequest.php'] = array(
      'module' => 'justgiving',
      'weight' => 1,
    );
    $files[$library_path . '/ApiClients/Model/RegisterPageRequest.php'] = array(
      'module' => 'justgiving',
      'weight' => 2,
    );
  }
}

/**
 * Implements hook_menu().
 */
function justgiving_wf_menu() {
  $items['admin/config/services/justgiving'] = array(
    'title' => 'JustGiving',
    'description' => 'Just Giving integration options',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('justgiving_wf_admin'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'justgiving_wf.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function justgiving_wf_form_alter(&$form, &$form_state, $form_id) {
  global $_justgiving_helper;
  justgiving_wf_get_jg_helper();

  switch ($form_id) {
    case "webform_client_form_{$_justgiving_helper->forms['page']}":
      drupal_add_js(drupal_get_path('module', 'justgiving_wf') . '/js/checkshortname.js');

      // Try and set a default value for page shortname
      if ($form_state['webform']['page_num'] == 2) {
        if (!empty($_justgiving_helper->session['submitted']['civicrm_1_contact_1_contact_first_name'])
          && (!empty($_justgiving_helper->session['submitted']['civicrm_1_contact_1_contact_last_name']))) {
          $form['submitted']['jg_pagefieldset']['jg_shortname']['#default_value'] =
            $_justgiving_helper->session['submitted']['civicrm_1_contact_1_contact_first_name']
            . $_justgiving_helper->session['submitted']['civicrm_1_contact_1_contact_last_name'];
        }
      }
      $form['#validate'][] = 'justgiving_wf_form_validate'; //function name
      break;
  }
}

/**
 * This function retrieves the actual submitted value for the specified alias (only works for the current page)
 * @param $name
 * @param $form
 * @param $form_state
 *
 * @return null
 */
function _justgiving_wf_getSubmittedValue($name, $form, $form_state) {
  if (empty($form_state['values']['submitted'])) {
    return NULL;
  }
  $submitted = $form_state['values']['submitted'];
  switch ($name) {
    case 'jg_createaccount':
      return (empty($submitted['civicrm_1_contact_1_fieldset_fieldset']['jg_createaccount'][1])) ? NULL : $submitted['civicrm_1_contact_1_fieldset_fieldset']['jg_createaccount'][1];
    case 'jg_createpage':
      return (empty($submitted['civicrm_1_contact_1_fieldset_fieldset']['jg_createpage'][1])) ? NULL : $submitted['civicrm_1_contact_1_fieldset_fieldset']['jg_createpage'][1];
    case 'jg_email':
      return (empty($submitted['civicrm_1_contact_1_fieldset_fieldset']['civicrm_1_contact_1_email_email'])) ? NULL : $submitted['civicrm_1_contact_1_fieldset_fieldset']['civicrm_1_contact_1_email_email'];
    case 'jg_password':
      return (empty($submitted['civicrm_1_contact_1_fieldset_fieldset']['jg_password'])) ? NULL : $submitted['civicrm_1_contact_1_fieldset_fieldset']['jg_password'];
    case 'jg_prefix':
      return (empty($submitted['civicrm_1_contact_1_fieldset_fieldset']['civicrm_1_contact_1_contact_prefix_id'])) ? NULL : $submitted['civicrm_1_contact_1_fieldset_fieldset']['civicrm_1_contact_1_contact_prefix_id'];
    case 'jg_firstname':
      return (empty($submitted['civicrm_1_contact_1_fieldset_fieldset']['civicrm_1_contact_1_contact_first_name'])) ? NULL : $submitted['civicrm_1_contact_1_fieldset_fieldset']['civicrm_1_contact_1_contact_first_name'];
    case 'jg_lastname':
      return (empty($submitted['civicrm_1_contact_1_fieldset_fieldset']['civicrm_1_contact_1_contact_last_name'])) ? NULL : $submitted['civicrm_1_contact_1_fieldset_fieldset']['civicrm_1_contact_1_contact_last_name'];
    case 'jg_address1':
      return (empty($submitted['civicrm_1_contact_1_fieldset_fieldset']['civicrm_1_contact_1_address_street_address'])) ? NULL : $submitted['civicrm_1_contact_1_fieldset_fieldset']['civicrm_1_contact_1_address_street_address'];
    case 'jg_city':
      return (empty($submitted['civicrm_1_contact_1_fieldset_fieldset']['civicrm_1_contact_1_address_city'])) ? NULL : $submitted['civicrm_1_contact_1_fieldset_fieldset']['civicrm_1_contact_1_address_city'];
    case 'jg_postcode':
      return (empty($submitted['civicrm_1_contact_1_fieldset_fieldset']['civicrm_1_contact_1_address_postal_code'])) ? NULL : $submitted['civicrm_1_contact_1_fieldset_fieldset']['civicrm_1_contact_1_address_postal_code'];
    case 'jg_charityid':
      return (empty($submitted['jg_pagefieldset']['jg_charityid'])) ? NULL : $submitted['jg_pagefieldset']['jg_charityid'];
    case 'jg_eventid':
      return (empty($submitted['jg_pagefieldset']['jg_eventid'])) ? NULL : $submitted['jg_pagefieldset']['jg_eventid'];
    case 'jg_shortname':
      return (empty($submitted['jg_pagefieldset']['jg_shortname'])) ? NULL : $submitted['jg_pagefieldset']['jg_shortname'];
    case 'jg_pagetitle':
      return (empty($submitted['jg_pagefieldset']['jg_pagetitle'])) ? NULL : $submitted['jg_pagefieldset']['jg_pagetitle'];
  }
  return NULL;
}

/**
 * Set a submitted value (not sure if this actually has an effect)
 * @param $name
 * @param $value
 * @param $form
 * @param $form_state
 *
 * @return null
 */
function _justgiving_wf_setSubmittedValue($name, $value, $form, &$form_state) {
  if (empty($form_state['values']['submitted'])) {
    return NULL;
  }
  $submitted = &$form_state['values']['submitted'];
  switch ($name) {
    case 'jg_createaccount':
      $submitted['civicrm_1_contact_1_fieldset_fieldset']['jg_createaccount'][1] = $value;
      break;
  }
}

/**
 * These are the fieldnames we need to get errors to show on the right field
 * @param $name
 *
 * @return null|string
 */
function _justgiving_wf_getFieldName($name) {
  switch ($name) {
    case 'jg_createaccount':
      return 'submitted][civicrm_1_contact_1_fieldset_fieldset][jg_createaccount';
    case 'jg_createpage':
      return 'submitted][civicrm_1_contact_1_fieldset_fieldset][jg_createpage';
    case 'jg_email':
      return 'submitted][civicrm_1_contact_1_fieldset_fieldset][civicrm_1_contact_1_email_email';
    case 'jg_password':
      return 'submitted][civicrm_1_contact_1_fieldset_fieldset][jg_password';
    case 'jg_prefix':
      return 'submitted[civicrm_1_contact_1_fieldset_fieldset][civicrm_1_contact_1_contact_prefix_id';
    case 'jg_firstname':
      return 'submitted[civicrm_1_contact_1_fieldset_fieldset][civicrm_1_contact_1_contact_first_name';
    case 'jg_lastname':
      return 'submitted[civicrm_1_contact_1_fieldset_fieldset][civicrm_1_contact_1_contact_last_name';
    case 'jg_address1':
      return 'submitted[civicrm_1_contact_1_fieldset_fieldset][civicrm_1_contact_1_address_street_address';
    case 'jg_city':
      return 'submitted[civicrm_1_contact_1_fieldset_fieldset][civicrm_1_contact_1_address_city';
    case 'jg_postcode':
      return 'submitted[civicrm_1_contact_1_fieldset_fieldset][civicrm_1_contact_1_address_postal_code';
    case 'jg_charityid':
      return 'submitted[jg_pagefieldset][jg_charityid';
    case 'jg_eventid':
      return 'submitted[jg_pagefieldset][jg_eventid';
    case 'jg_shortname':
      return 'submitted[jg_pagefieldset][jg_shortname';
    case 'jg_pagetitle':
      return 'submitted[jg_pagefieldset][jg_pagetitle';
    default:
      return NULL;
  }
}

/**
 * Validate fields required for Justgiving account and page.
 * @param $createAccount
 * @param $createPage
 * @param $form
 * @param $form_state
 *
 * @return bool
 */
function _justgiving_wf_validateFields($createAccount, $createPage, $form, $form_state) {
  $errors = array();
  if ($createAccount && ($form_state['webform']['page_num'] == 1)) {
    // createAccount requires:
    $createAccountRequired = array(
      'jg_prefix',
      'jg_firstname',
      'jg_lastname',
      'jg_address1',
      'jg_city',
      'jg_postcode',
      'jg_email',
      'jg_password'
    );
    foreach ($createAccountRequired as $key) {
      if (_justgiving_wf_getSubmittedValue($key, $form, $form_state) === NULL) {
        $errors[_justgiving_wf_getFieldName($key)] = 'This field is required to create a JustGiving Account';
      }
    }
  }

  if ($createPage && ($form_state['webform']['page_num'] == 2)) {
    // createPage requires:
    $createPageRequired = array(
      //'jg_charityid', Now passed via URL
      'jg_eventid',
      'jg_shortname',
      'jg_pagetitle'
    );
    foreach ($createPageRequired as $key) {
      if (_justgiving_wf_getSubmittedValue($key, $form, $form_state) === NULL) {
        $errors[_justgiving_wf_getFieldName($key)] = 'This field is required to create a JustGiving Page';
      }
    }
  }
  if (is_array($errors) && (count($errors) > 0)) {
    foreach ($errors as $field => $msg) {
      form_set_error($field, $msg);
    }
    return FALSE;
  }
  return TRUE;
}

function _justgiving_wf_isFieldset($key, $form_state) {
  if (empty($form_state['webform']['component_tree']['children'])) {
    return FALSE;
  }
  foreach ($form_state['webform']['component_tree']['children'] as $componentId => $value) {
    if ((!empty($value['form_key'] && ($value['form_key'] == $key))) && !empty($value['type']) && ($value['type'] == 'fieldset')) {
      return TRUE;
    }
  }
  return FALSE;
}

function _justgiving_wf_saveSubmittedValues($values, $form_state) {
  global $_justgiving_helper;
  justgiving_wf_get_jg_helper();

  if (!empty($values)) {
    foreach ($values as $key => $value) {
      if (_justgiving_wf_isFieldSet($key, $form_state)) {
        _justgiving_wf_saveSubmittedValues($value, $form_state);
      }
      else {
        switch ($key) {
          case 'jg_createaccount':
          case 'jg_createpage':
            // Special case, as these are checkboxes, use the first array index (ie. first checkbox value)
            $_justgiving_helper->session['submitted'][$key] = reset($value);
            break;
          default:
            $_justgiving_helper->session['submitted'][$key] = $value;
        }
      }
    }
  }
}

/**
 * This validates the webform, and creates the justgiving account if requested.
 * @param $form
 * @param $form_state
 */
function justgiving_wf_form_validate($form, &$form_state) {
  global $_justgiving_helper;
  justgiving_wf_get_jg_helper();

  civicrm_initialize();

  $formId = $form['#form_id'];
  $errors = FALSE;
  switch ($formId) {
    case "webform_client_form_{$_justgiving_helper->forms['page']}":
      // Save values from this page in session
      if (!empty($form_state['values']['submitted'])) {
        _justgiving_wf_saveSubmittedValues($form_state['values']['submitted'], $form_state);
      }
      // Save charity_id from URL
      if (!empty($_REQUEST['charity_id'])) {
        $_justgiving_helper->session['submitted']['charity_id'] = (int) $_REQUEST['charity_id'];
      }
      else {
        $errors['charity_id'] = 'You must specify the JustGiving Charity ID in the request (charity_id=).';
      }

      // If jg_createpage is empty, user doesn't want to create a page (no point creating account either)
      $createPage = $_justgiving_helper->session['submitted']['jg_createpage'];
      if (empty($createPage)) {
        return;
      }

      // If jg_createaccount is NULL, assume we are not creating/using a justgiving account
      $createAccount = $_justgiving_helper->session['submitted']['jg_createaccount'];

      // Validate that all required fields are valid
      if (!_justgiving_wf_validateFields($createAccount, $createPage, $form, $form_state)) {
        return;
      }

      // Only create account on first page submission
      if ($form_state['webform']['page_num'] !== 1) {
        return;
      }

      // Validate justgiving account details
      $email = _justgiving_wf_getSubmittedValue('jg_email', $form, $form_state);
      $emailRegistered = $_justgiving_helper->client->Account->IsEmailRegistered($email);

      // Check if account is registered, and if we requested to create account
      if ($createAccount && $emailRegistered) {
        $errors[_justgiving_wf_getFieldName('jg_email')] = t('%d is already registered with JustGiving', array('%d' => $email));
      }
      elseif (!$createAccount && !$emailRegistered) {
        // Can't find account
        $errors[_justgiving_wf_getFieldName('jg_email')] = t('%d is not registered with JustGiving', array('%d' => $email));
      }
      elseif (!$createAccount && $emailRegistered) {
        // Check account credentials are valid
        $accountDetails = json_encode(array(
          'email' => _justgiving_wf_getSubmittedValue('jg_email', $form, $form_state),
          'password' => _justgiving_wf_getSubmittedValue('jg_password', $form, $form_state),
        ));
        if (!$_justgiving_helper->client->Account->IsValidV2($accountDetails)) {
          $errors[_justgiving_wf_getFieldName('jg_email')] = t('Justgiving username/password incorrect.');
          $errors[_justgiving_wf_getFieldName('jg_password')] = t('Justgiving username/password incorrect.');
        }
      }
      // If no errors, and account creation requested, create an account with justgiving
      if (empty($errors)) {
        $createAccount = _justgiving_wf_getSubmittedValue('jg_createaccount', $form, $form_state);
        if ($createAccount) {
          $title = civicrm_api3('OptionValue', 'getsingle', array(
            'return' => array("label"),
            'option_group_id' => "individual_prefix",
            'value' => _justgiving_wf_getSubmittedValue('jg_prefix', $form, $form_state),
          ));
          $createParams = array(
            'title' => preg_replace('/[^[:alpha:]]/', '', $title['label']),
            'firstName' => _justgiving_wf_getSubmittedValue('jg_firstname', $form, $form_state),
            'lastName' => _justgiving_wf_getSubmittedValue('jg_lastname', $form, $form_state),
            'Address' => array(
              'line1' => _justgiving_wf_getSubmittedValue('jg_address1', $form, $form_state),
              'townOrCity' => _justgiving_wf_getSubmittedValue('jg_city', $form, $form_state),
              'country' => 'United Kingdom',
              'postcodeOrZipcode' => _justgiving_wf_getSubmittedValue('jg_postcode', $form, $form_state),
            ),
            'email' => $email,
            'password' => _justgiving_wf_getSubmittedValue('jg_password', $form, $form_state),
            'acceptTermsAndConditions' => TRUE,
          );

          $httpResponse = $_justgiving_helper->accounts('create', $createParams);
          if (($httpResponse->httpStatusCode !== 200) && (strpos($_justgiving_helper->settings['environment'], 'sandbox') === FALSE)) {
            // We're not in sandbox mode so raise an error (sandbox account creation gives 503 on success!
            $errors['submitted'] = (empty($httpResponse->bodyResponse->error->desc)) ? 'Could not create Justgiving Account' : $httpResponse->bodyResponse->error->desc;
          }
          else {
            // Unset "create account" now we've created one!
            _justgiving_wf_setSubmittedValue('jg_createaccount', 0, $form, $form_state);
            drupal_set_message(t('A JustGiving Account was created.  You should receive an email from JustGiving shortly.'), 'status');
          }
        }
      }
      break;
  }
  if (is_array($errors) && (count($errors) > 0)) {
      foreach ($errors as $field => $msg) {
        form_set_error($field, $msg);
      }
  }
}

function _justgiving_wf_webform_getpreSaveValue($name, $node, $submission) {
  foreach ($node->webform['components'] as $key => $element) {
    if ($element['form_key'] == $name) {
      return $submission->data[$key][0];
    }
  }
}

function _justgiving_wf_webform_setpreSaveValue($name, $value, $node, $submission) {
  foreach ($node->webform['components'] as $key => $element) {
    if ($element['form_key'] == $name) {
      $submission->data[$key][0] = $value;
    }
  }
}


/**
 * Implements hook_webform_submission_presave().
 *
 * Hooks in before saving to DB to allow JG processing.
 */
function justgiving_wf_webform_submission_presave($node, &$submission) {
  global $_justgiving_helper;
  justgiving_wf_get_jg_helper();

  $errors = array();

  switch ($submission->nid) {
    case $_justgiving_helper->forms['page']:
      // Check if user wanted to create a page.
      if (empty($_justgiving_helper->session['submitted']['jg_createpage'])) {
        return;
      }
      // We've validated/created a justgiving account in form validation.  So we can go ahead here and create the page.
      $newPageParams = array(
        'charityId' => $_justgiving_helper->session['submitted']['charity_id'],
        'eventId' => _justgiving_wf_webform_getpreSaveValue('jg_eventid', $node, $submission),
        'charityOptIn' => FALSE,
        'charityFunded' => FALSE,
        'pageShortName' => _justgiving_wf_webform_getpreSaveValue('jg_shortname', $node, $submission),
        'pageTitle' => _justgiving_wf_webform_getpreSaveValue('jg_pagetitle', $node, $submission),
      );
      if (_justgiving_wf_webform_getpreSaveValue('jg_pagestory', $node, $submission)) {
        $newPageParams['pageStory'] = _justgiving_wf_webform_getpreSaveValue('jg_pagestory', $node, $submission);
      }
      if (_justgiving_wf_webform_getpreSaveValue('jg_targetamount', $node, $submission)) {
        $newPageParams['targetAmount'] = _justgiving_wf_webform_getpreSaveValue('jg_targetamount', $node, $submission);
      }

      $authParams = array(
        'username' => $_justgiving_helper->session['submitted']['civicrm_1_contact_1_email_email'],
        'password' => $_justgiving_helper->session['submitted']['jg_password'],
      );
      $jgCreate = $_justgiving_helper->pages('create', $authParams, $newPageParams);

      // Unset the password field so we don't save it
      foreach ($submission->data as $key => $value) {
        switch ($node->webform['components'][$key]['form_key']) {
          // Unset the password so they are not store in the DB.
          case 'jg_password':
            _justgiving_wf_webform_setpreSaveValue('jg_password', '' ,$node, $submission);
            break;
        }
      }

      watchdog('justgiving_wf', 'JustGiving Page Create response: ' . print_r($jgCreate, TRUE));
      // Check the result of the page creation request
      if ($jgCreate->httpStatusCode !== 201) {
        if (!empty($jgCreate->bodyResponse->error->desc)) {
          $err = $jgCreate->bodyResponse->error->desc;
        }
        elseif (!empty($jgCreate->bodyResponse[0]->desc)) {
          $err = $jgCreate->bodyResponse[0]->desc;
        }
        else {
          $err = 'Unknown error';
        }
        $err .= ' (' . $jgCreate->httpStatusCode . ')';
        $errors['submitted'] = 'Unable to create Justgiving page. ' . $err;
      }
      else {
        // Page created successfully - present message to user with a clickable link
        $msg = 'Congratulations! Your JustGiving Page was created and you will shortly receive an email from Justgiving.';
        if (!empty($jgCreate->bodyResponse->signOnUrl) && !empty($jgCreate->bodyResponse->next->uri)) {
          $msg .= '<br/>To view your page on JustGiving use this link: <a href="'. $jgCreate->bodyResponse->signOnUrl .'">'.$jgCreate->bodyResponse->next->uri.'</a>';
        }
        drupal_set_message($msg);
      }
      $apiParams = array(
        'charity_id' => $newPageParams['charityId'],
        'event_id' => $newPageParams['eventId'],
        'charity_opt_in' => (int) $newPageParams['charityOptIn'],
        'charity_funded' => (int) $newPageParams['charityFunded'],
        'page_short_name' => $newPageParams['pageShortName'],
        'page_title' => $newPageParams['pageTitle'],
      );
      if (!empty($newPageParams['pageStory'])) {
        $apiParams['page_story'] = $newPageParams['pageStory'];
      }
      if (!empty($newPageParams['targetAmount'])) {
        $apiParams['target_amount'] = $newPageParams['targetAmount'];
      }
      if (!empty($jgCreate->bodyResponse->pageId)) {
        $apiParams['page_id'] = $jgCreate->bodyResponse->pageId;
      }
      if (!empty($err)) {
        $apiParams['error'] = $err;
      }
      // Record page creation in Civi
      civicrm_api3('JustgivingFundraisingpage', 'create', $apiParams);
      break;
  }
  if (count($errors) > 0) {
    watchdog('justgiving_wf', 'Errors on submit' . print_r($errors, TRUE));
    foreach ($errors as $field => $error) {
      drupal_set_message($error, 'error');
    }
  }
}

/**
 * Implementation of hook_webform_submission_insert
 *
 * @param $node
 * @param $submission
 */
function justgiving_wf_webform_webform_submission_insert($node, $submission) {
  global $_justgiving_helper;
  justgiving_wf_get_jg_helper();

  switch ($submission->nid) {
    case $_justgiving_helper->forms['page']:
      // We just submitted the abseil webform, add the contact to group
      if (empty($_justgiving_helper->session['submitted']['charity_id'])) {
        watchdog('justgiving_wf', 'No charity_id defined', WATCHDOG_ERROR);
        return;
      }
      if (empty($_justgiving_helper->session['submitted']['civicrm_1_contact_1_contact_first_name'])) {
        watchdog('justgiving_wf', 'No first name defined', WATCHDOG_ERROR);
        return;
      }
      if (empty($_justgiving_helper->session['submitted']['civicrm_1_contact_1_contact_last_name'])) {
        watchdog('justgiving_wf', 'No last name defined', WATCHDOG_ERROR);
        return;
      }
      if (empty($_justgiving_helper->session['submitted']['civicrm_1_contact_1_email_email'])) {
        watchdog('justgiving_wf', 'No email defined', WATCHDOG_ERROR);
        return;
      }
      $params['charity_id'] = $_justgiving_helper->session['submitted']['charity_id'];
      $params['firstname'] = $_justgiving_helper->session['submitted']['civicrm_1_contact_1_contact_first_name'];
      $params['lastname'] = $_justgiving_helper->session['submitted']['civicrm_1_contact_1_contact_last_name'];
      $params['email'] = $_justgiving_helper->session['submitted']['civicrm_1_contact_1_email_email'];
      _justgiving_wf_webform_addToGroup($params);
      break;
  }
}

/**
 * Add to group. Params are firstname,lastname,email,charity_id
 * @param $params
 */
function _justgiving_wf_webform_addToGroup($params) {
  civicrm_initialize();

  // Get Contact for webform we just submitted
  try {
    $contact = civicrm_api3('Contact', 'getsingle', $params);
  }
  catch (Exception $e) {
    watchdog('justgiving_wf', 'Could not find contact record', WATCHDOG_ERROR);
    return;
  }

  // The map of Justgiving charity_id => CiviCRM "participant" Group
  $groupMap = array(
    168132 => 99, // Edinburgh Children's Hospital Charity
    2367233 => 100, // The Yard
  );

  // Get the group Id that maps to charity
  if (array_key_exists($params['charity_id'], $groupMap)) {
    $groupId = $groupMap[$params['charity_id']];
  }
  else {
    return;
  }

  // Add contact to group
  $groupContact = civicrm_api3('GroupContact', 'create', array(
    'group_id' => $groupId,
    'contact_id' => $contact['id'],
  ));
  watchdog('justgiving_wf', 'groupContact: ' . print_r($groupContact, TRUE));
}
